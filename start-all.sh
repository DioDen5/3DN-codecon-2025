#!/bin/bash

echo "üöÄ Starting StudLink services..."

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–æ–¥—É –∫–æ–ª—å–æ—Ä–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
check_running_services() {
    print_status "Checking for running services..."
    
    if pgrep -f "mongod.*dbpath" >/dev/null; then
        print_warning "MongoDB is already running"
    fi
    
    if pgrep -f "node.*server.js" >/dev/null; then
        print_warning "Backend is already running"
    fi
    
    if pgrep -f "vite" >/dev/null; then
        print_warning "Frontend is already running"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É
wait_for_service() {
    local url=$1
    local service_name=$2
    local max_attempts=30
    local attempt=1
    
    print_status "Waiting for $service_name to start..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s "$url" >/dev/null 2>&1; then
            print_success "$service_name is ready!"
            return 0
        fi
        
        echo -n "."
        sleep 1
        attempt=$((attempt + 1))
    done
    
    print_error "$service_name failed to start after $max_attempts seconds"
    return 1
}

# –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à Vite
clean_vite_cache() {
    print_status "Cleaning Vite cache..."
    if [ -d "frontend" ]; then
        cd frontend
        rm -rf node_modules/.vite
        rm -rf dist
        cd ..
        print_success "Vite cache cleaned"
    else
        print_warning "Frontend directory not found, skipping cache cleanup"
    fi
}

# –ó–∞–ø—É—Å–∫ MongoDB
start_mongodb() {
    print_status "Starting MongoDB..."
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤
    mkdir -p /opt/homebrew/var/log/mongodb
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ MongoDB –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    mongod --dbpath /opt/homebrew/var/mongodb --logpath /opt/homebrew/var/log/mongodb/mongo.log --fork
    
    if [ $? -eq 0 ]; then
        print_success "MongoDB started successfully"
    else
        print_error "Failed to start MongoDB"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ Backend
start_backend() {
    print_status "Starting Backend..."
    
    cd Backend
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    if [ ! -d "node_modules" ]; then
        print_status "Installing backend dependencies..."
        npm install
    fi
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ backend –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    npm start > ../backend.log 2>&1 &
    BACKEND_PID=$!
    
    cd ..
    
    # –û—á—ñ–∫—É–≤–∞—Ç–∏ –∑–∞–ø—É—Å–∫—É backend
    if wait_for_service "http://localhost:4000/api/health" "Backend"; then
        print_success "Backend started successfully (PID: $BACKEND_PID)"
    else
        print_error "Backend failed to start"
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫ Frontend
start_frontend() {
    print_status "Starting Frontend..."
    
    if [ ! -d "frontend" ]; then
        print_error "Frontend directory not found!"
        return 1
    fi
    
    cd frontend
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    if [ ! -d "node_modules" ]; then
        print_status "Installing frontend dependencies..."
        npm install
    fi
    
    # –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à Vite
    clean_vite_cache
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ frontend –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    npm run dev > ../frontend.log 2>&1 &
    FRONTEND_PID=$!
    
    cd ..
    
    # –û—á—ñ–∫—É–≤–∞—Ç–∏ –∑–∞–ø—É—Å–∫—É frontend
    if wait_for_service "http://localhost:5176" "Frontend"; then
        print_success "Frontend started successfully (PID: $FRONTEND_PID)"
    else
        print_warning "Frontend might be running on a different port (check frontend.log)"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    echo "=========================================="
    echo "üöÄ StudLink Development Environment"
    echo "=========================================="
    echo ""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤—ñ—Å—ñ–≤
    check_running_services
    
    echo ""
    print_status "Starting services in order..."
    echo ""
    
    # 1. MongoDB
    start_mongodb
    echo ""
    
    # 2. Backend
    start_backend
    echo ""
    
    # 3. Frontend
    start_frontend
    echo ""
    
    echo "=========================================="
    print_success "All services started successfully!"
    echo "=========================================="
    echo ""
    echo "üåê Available services:"
    echo "   ‚Ä¢ MongoDB:    mongodb://localhost:27017"
    echo "   ‚Ä¢ Backend:    http://localhost:4000"
    echo "   ‚Ä¢ Frontend:   http://localhost:5176"
    echo ""
    echo "üìã Logs:"
    echo "   ‚Ä¢ Backend:    tail -f backend.log"
    echo "   ‚Ä¢ Frontend:   tail -f frontend.log"
    echo ""
    echo "üõë To stop all services: ./stop-all.sh"
    echo ""
    
    # –ó–±–µ—Ä–µ–≥—Ç–∏ PID –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ –∑—É–ø–∏–Ω–µ–Ω–Ω—è
    echo "$BACKEND_PID" > .backend.pid
    echo "$FRONTEND_PID" > .frontend.pid
}

# –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown
cleanup() {
    echo ""
    print_status "Shutting down services..."
    
    if [ -f ".backend.pid" ]; then
        BACKEND_PID=$(cat .backend.pid)
        if kill -0 $BACKEND_PID 2>/dev/null; then
            kill $BACKEND_PID
            print_success "Backend stopped"
        fi
        rm -f .backend.pid
    fi
    
    if [ -f ".frontend.pid" ]; then
        FRONTEND_PID=$(cat .frontend.pid)
        if kill -0 $FRONTEND_PID 2>/dev/null; then
            kill $FRONTEND_PID
            print_success "Frontend stopped"
        fi
        rm -f .frontend.pid
    fi
    
    # –ó—É–ø–∏–Ω–∏—Ç–∏ MongoDB
    if pgrep -f "mongod.*dbpath" >/dev/null; then
        pkill -f "mongod.*dbpath"
        print_success "MongoDB stopped"
    fi
    
    print_success "All services stopped"
    exit 0
}

# –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤
trap cleanup SIGINT SIGTERM

# –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
main

# –Ø–∫—â–æ —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è, –∑–∞–ª–∏—à–∏—Ç–∏ –π–æ–≥–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
print_status "Services are running. Press Ctrl+C to stop all services."
wait